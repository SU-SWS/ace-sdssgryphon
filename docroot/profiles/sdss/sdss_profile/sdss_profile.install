<?php

/**
 * @file
 * sdss_profile.install
 */

use Drupal\Core\DrupalKernel;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\NodeInterface;

/**
 * Implements hook_requirements().
 */
function sdss_profile_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {

    $site_path = DrupalKernel::findSitePath(\Drupal::request());
    $site_path = explode('/', $site_path);
    $site_name = $site_path[1];

    $requirements['stanford_site_alias'] = [
      'title' => t('Stanford Site Alias'),
      'value' => $site_name,
      'severity' => REQUIREMENT_INFO,
    ];
  }
  return $requirements;
}


/**
 * Move unsectioned paragraphs on stanford_news nodes into one column
 * layout_paragraph sections.
 */
function sdss_profile_update_9000(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }
  drupal_static_reset();
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');

  $node_ids = array_splice($sandbox['nids'], 0, 25);

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $components */
    $components = $node->get('su_news_components');
    $unsectioned_paragraphs = [];

    if (!$components->isEmpty()) {
      $section_delta_counter = 0;
      $components_list = $components->getValue();

      /** @var Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $component */
      foreach ($components as $delta => $component) {
        /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
        $paragraph = $paragraph_storage->loadRevision($component->get('target_revision_id')
          ->getString());
        $parent_uuid = $paragraph->getBehaviorSetting('layout_paragraphs', 'parent_uuid');

        if (
          $parent_uuid ||
          $paragraph->getParagraphType()->id() == 'stanford_layout'
        ) {
          continue;
        }

        $section_paragraph = $paragraph_storage->create(['type' => 'stanford_layout']);
        $section_paragraph_layout_settings = [
            'layout' => 'layout_paragraphs_sdss_1_column',
            'parent_uuid' => NULL,
            'region' => NULL,
        ];
        $section_paragraph->setBehaviorSettings('layout_paragraphs', $section_paragraph_layout_settings);
        $section_paragraph->save();
        $parent_uuid = $section_paragraph->uuid();

        $paragraph_layout_settings = [
            'region' => 'main',
            'parent_uuid' => $parent_uuid,
        ];
        $paragraph->setBehaviorSettings('layout_paragraphs', $paragraph_layout_settings);
        $paragraph->save();

        $section_paragraph_entity_reference = [
          'target_id' => $section_paragraph->id(),
          'target_revision_id' => $section_paragraph->getRevisionId(),
        ];
        array_splice($components_list, $delta + $section_delta_counter, 0, ['entity' => $section_paragraph_entity_reference]);

        $section_delta_counter++;
      }
      $node->set('su_news_components', $components_list)->save();
    }
  }

  // Support batching updates.
  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Enable 2 and 3 column layouts on the stanford_layout paragraph type.
 */
function sdss_profile_update_9001(&$sandbox) {
  $paragraph_type = \Drupal::entityTypeManager()->getStorage('paragraphs_type')->load('stanford_layout');
  $behavior_plugin = $paragraph_type->getBehaviorPlugin('layout_paragraphs');
  $configuration = [
    "enabled" => TRUE,
    "available_layouts" => [
      "layout_paragraphs_sdss_1_column" => "1 Column",
      "layout_paragraphs_sdss_2_column" => "2 Column",
      "layout_paragraphs_sdss_3_column" => "3 Column",
    ]
  ];
  $behavior_plugin->setConfiguration($configuration);
  $paragraph_type->save();
}

/**
 * Install Claro theme and uninstall Seven.
 */
function sdss_profile_update_9002() {
  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
  $theme_installer = \Drupal::service('theme_installer');
  $theme_installer->install(['claro', 'stanford_profile_admin']);
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('admin', 'stanford_profile_admin')
    ->save();
  try {
    $theme_installer->uninstall(['seven']);
  }
  catch (\Exception $e) {
    // Theme was already uninstalled.
  }
}

/**
 * Correct path aliases that somehow are incorrectly formatted.
 */
function sdss_profile_update_9004() {
  $database = \Drupal::database();
  $query = $database->select('path_alias', 'p')
    ->fields('p');
  $conditions = $query->orConditionGroup()
    ->condition('alias', '%http:/%', 'LIKE')
    ->condition('alias', '%https:/%', 'LIKE');
  $query->condition($conditions);
  $results = $query->execute();

  while ($row = $results->fetchAssoc()) {
    $new_alias = trim(preg_replace('/:\/([a-z0-9])/', '://$1', $row['alias']), '/');
    if (!str_starts_with($new_alias, 'http')) {
      throw new \Exception('Unknown path alias pattern to correct');
    }
    $new_alias = parse_url($new_alias);

    if (empty($new_alias['path'])) {
      throw new \Exception('Unknown path alias pattern to correct');
    }
    $new_alias = $new_alias['path'];

    $database->update('path_alias')
      ->fields(['alias' => $new_alias])
      ->condition('id', $row['id'])
      ->execute();
    $database->update('path_alias_revision')
      ->fields(['alias' => $new_alias])
      ->condition('id', $row['id'])
      ->execute();
  }
}

/**
 * Migrate Basic Page react paragraphs to layout paragraphs.
 */
function sdss_profile_update_9005(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_page')
      ->sort('created')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }
  drupal_static_reset();
  $row_storage = \Drupal::entityTypeManager()->getStorage('paragraph_row');
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $node_ids = array_splice($sandbox['nids'], 0, 25);

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  $delete_entities = [];
  foreach ($nodes as $node) {
    $changed_time = $node->getChangedTime();
    $new_components = [];
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $row */
    foreach ($node->get('su_page_components') as $row) {
      $row_entity = $row_storage->loadRevision($row->get('target_revision_id')
        ->getString());

      $bg_color = $row_entity->get('su_para_row_bgcolor')->getString();
      $bg_color = explode('--', $bg_color);
      $bg_color = array_pop($bg_color);
      if (!$bg_color) $bg_color = 'none';

      $delete_entities[] = $row_entity;
      $number_of_items = min($row_entity->get('su_page_components')->count(), 3);
      $layout_id = "layout_paragraphs_sdss_{$number_of_items}_column";

      $new_row_entity = $paragraph_storage->create(['type' => 'stanford_layout']);
      $new_row_entity->setBehaviorSettings('layout_paragraphs', [
        'layout' => $layout_id,
        'config' => [
          'label' => '',
          'bg_color' => $bg_color,
        ],
        'parent_uuid' => NULL,
        'region' => NULL,
      ]);
      $new_row_entity->setParentEntity($node, 'su_page_components');
      $new_row_entity->save();

      $new_components[] = [
        'target_id' => $new_row_entity->id(),
        'entity' => $new_row_entity,
      ];

      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $row_item */
      foreach ($row_entity->get('su_page_components') as $delta => $row_item) {
        /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
        $paragraph = $paragraph_storage->loadRevision($row_item->get('target_revision_id')
          ->getString());
        $behaviors = $paragraph->getAllBehaviorSettings();
        unset($behaviors['react']);
        $behaviors['layout_paragraphs'] = [
          'parent_uuid' => $new_row_entity->uuid(),
          'region' => _sdss_profile_update_9005_get_item_region($delta, $layout_id),
        ];
        $new_paragraph = $paragraph->createDuplicate();
        $new_paragraph->enforceIsNew();
        $new_paragraph->setParentEntity($node, 'su_page_components');
        $new_paragraph->setAllBehaviorSettings($behaviors);
        $new_paragraph->save();

        $new_components[] = [
          'target_id' => $new_paragraph->id(),
          'entity' => $new_paragraph,
        ];
        $delete_entities[] = $paragraph;
      }
    }
    $node->set('su_page_components', $new_components)->save();
    _sdss_profile_reset_node_changed_time($node, $changed_time);
  }
  foreach ($delete_entities as $entity) {
    $entity->delete();
  }
  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Migrate Publications react paragraphs to layout paragraphs.
 */
function sdss_profile_update_9006(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_publication')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $row_storage = \Drupal::entityTypeManager()->getStorage('paragraph_row');
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $node_ids = array_splice($sandbox['nids'], 0, 25);

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  $delete_entities = [];
  foreach ($nodes as $node) {
    $changed_time = $node->getChangedTime();
    $new_components = [];
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $row */
    foreach ($node->get('su_publication_components') as $row) {
      $row_entity = $row_storage->load($row->get('target_id')->getString());

      $delete_entities[] = $row_entity;
      $number_of_items = $row_entity->get('su_pubs_components')->count();
      $layout_id = "layout_paragraphs_sdss_{$number_of_items}_column";

      $new_row_entity = $paragraph_storage->create(['type' => 'stanford_layout']);
      $new_row_entity->setBehaviorSettings('layout_paragraphs', [
        'layout' => $layout_id,
        'config' => ['label' => ''],
        'parent_uuid' => NULL,
        'region' => NULL,
      ]);
      $new_row_entity->setParentEntity($node, 'su_publication_components');
      $new_row_entity->save();

      $new_components[] = [
        'target_id' => $new_row_entity->id(),
        'target_revision_id' => $new_row_entity->getRevisionId(),
      ];

      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $row_item */
      foreach ($row_entity->get('su_pubs_components') as $delta => $row_item) {
        /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
        $paragraph = $paragraph_storage->load($row_item->get('target_id')
          ->getString());
        $behaviors = $paragraph->getAllBehaviorSettings();
        unset($behaviors['react']);
        $behaviors['layout_paragraphs'] = [
          'parent_uuid' => $new_row_entity->uuid(),
          'region' => _sdss_profile_update_9005_get_item_region($delta, $layout_id),
        ];
        $new_paragraph = $paragraph->createDuplicate();
        $new_paragraph->enforceIsNew();
        $new_paragraph->setParentEntity($node, 'su_publication_components');
        $new_paragraph->setAllBehaviorSettings($behaviors);
        $new_paragraph->save();

        $new_components[] = [
          'target_id' => $new_paragraph->id(),
          'target_revision_id' => $new_paragraph->getRevisionId(),
        ];
        $delete_entities[] = $paragraph;
      }
    }

    $node->set('su_publication_components', $new_components)->save();
    _sdss_profile_reset_node_changed_time($node, $changed_time);
  }
  foreach ($delete_entities as $entity) {
    $entity->delete();
  }
  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Get the items new region in the layout paragraphs layout.
 *
 * @param int $delta
 *   Position of the item in the row.
 * @param string $layout_id
 *   Parent layout id.
 *
 * @return string
 *   New region.
 */
function _sdss_profile_update_9005_get_item_region(int $delta, string $layout_id): string {
  switch ($layout_id) {
    case 'layout_paragraphs_sdss_2_column':
      return $delta ? 'right' : 'left';

    case 'layout_paragraphs_sdss_3_column':
      $delta_regions = ['left', 'main', 'right', 'right', 'right'];
      return $delta_regions[$delta];
  }
  return 'main';
}

/**
 * Update pages with custom layout builder settings.
 */
function sdss_profile_update_9007(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('layout_builder__layout', NULL, 'IS NOT NULL')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 25);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);

  $database = \Drupal::database();
  $convert_fields = [
    'field_block:node:stanford_event:su_event_components',
    'field_block:node:stanford_event_series:su_event_series_components',
    'field_block:node:stanford_news:su_news_components',
    'field_block:node:stanford_page:su_page_components',
    'field_block:node:stanford_person:su_person_components',
    'field_block:node:stanford_person:su_person_components',
    'field_block:node:stanford_publication:su_publication_components',
  ];
  foreach ($nodes as $node) {
    $changed_time = $node->getChangedTime();
    $save_node = FALSE;
    /** @var \Drupal\layout_builder\Field\LayoutSectionItemList $layout */
    $layout = $node->get('layout_builder__layout');
    foreach ($layout->getSections() as $section) {
      foreach ($section->getComponents() as $component) {
        $config = $component->get('configuration');
        if (in_array($config['id'], $convert_fields)) {
          $config['formatter']['type'] = 'layout_paragraphs';
          $config['formatter']['settings'] = ['view_mode' => 'default'];
          $component->setConfiguration($config);
          $save_node = TRUE;
        }
      }
    }
    if ($save_node) {
      $node->save();

      _sdss_profile_reset_node_changed_time($node, $changed_time);
    }
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Uninstall Stable theme.
 */
function sdss_profile_update_9100(&$sandbox) {
  try {
    \Drupal::service('theme_installer')->uninstall(['stable']);
  }
  catch (\Exception $e) {
    // Theme is already uninstalled.
  }
}

/**
 * Install menu_link module and configure the field.
 */
function sdss_profile_update_9101() {
  $entity_type_manager = \Drupal::entityTypeManager();

  \Drupal::service('module_installer')->install(['menu_link']);
  $entity_type_manager->getStorage('field_storage_config')
    ->create([
      'uuid' => '963caf4a-7a55-4ed6-961d-765ea7594192',
      'field_name' => 'field_menulink',
      'type' => 'menu_link',
      'entity_type' => 'node',
      'cardinality' => 1,
    ])->save();
  $field_config_storage = $entity_type_manager->getStorage('field_config');
  $bundles = [
    'stanford_page',
    'stanford_event_series',
    'stanford_person',
    'stanford_policy',
  ];
  foreach ($bundles as $bundle) {
    $field_config_storage->create([
      'entity_type' => 'node',
      'field_name' => 'field_menulink',
      'bundle' => $bundle,
      'label' => 'Menu Link',
    ])->save();
  }
  $menu_items = $entity_type_manager->getStorage('menu_link_content')
    ->loadByProperties(['menu_name' => 'main']);

  // Re-save all menu items to update their link uris.
  // @see \Drupal\stanford_profile_helper\EventSubscriber\EntityEventSubscriber::preSaveMenuLinkContent()
  foreach ($menu_items as $menu_item) {
    $menu_item->save();
  }
  drupal_flush_all_caches();
}

/**
 * Update menu links on nodes for the updated version of menu_link_weight.
 */
function sdss_profile_update_9102() {
  // Instantiate the path alias path processor because it doesn't get added in
  // this update hook.
  \Drupal::service('path_processor_manager')
    ->addOutbound(\Drupal::service('path_alias.path_processor'), 300);

  /** @var \Drupal\Core\Menu\MenuLinkTree $menu_link_tree */
  $menu_link_tree = \Drupal::service('menu.link_tree');
  $parameters = new MenuTreeParameters();

  $menu = $menu_link_tree->load('main', $parameters);
  _sdss_profile_fix_menu($menu);
}

/**
 * Re-run stanford_card update.
 */
function sdss_profile_update_9103(&$sandbox) {
  if ($field = FieldConfig::loadByName('paragraph', 'stanford_card', 'su_card_link_display')) {
    module_load_install('stanford_paragraph_card');
    stanford_paragraph_card_update_8001($sandbox);
    /** @var \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type */
    $paragraph_type = \Drupal::entityTypeManager()
      ->getStorage('paragraphs_type')
      ->load('stanford_card');
    $behaviors = $paragraph_type->get('behavior_plugins');
    $behaviors['su_card_styles'] = ['enabeld' => true];
    $paragraph_type->set('behavior_plugins', $behaviors);
    $paragraph_type->save();
    $field->delete();
  }
return;
  $ns = \Drupal::entityTypeManager()->getStorage('node');
  $ps = \Drupal::entityTypeManager()->getStorage('paragraph');
  $ids = $ns->getQuery()
    ->accessCheck(FALSE)
    ->condition('type', 'stanford_page')
    ->execute();
  foreach ($ns->loadMultiple($ids) as $node) {
    foreach ($node->get('su_page_components') as $item) {
      if ($p = $ps->load($item->getValue()['target_id'])) {
        $p->setParentEntity($node, 'su_page_components');
        $p->save();
      }
    }
  }
}

/**
 * Set header layout variant based on current lock-up setting.
 */
function sdss_profile_update_9105() {
  $header_layout_variant = 'none';
  $config_pages_loader = \Drupal::service('config_pages.loader');
  $lockup_option = $config_pages_loader->getValue('lockup_settings', 'su_lockup_options', 0, 'value');
  if (
    $lockup_option
    && $lockup_option == 'none'
  ) {
    $header_layout_variant = 'option_a';
  }
  $theme_config = \Drupal::getContainer()->get('config.factory')->getEditable('sdss_subtheme.settings');
  $theme_config->set('header_layout_variant', $header_layout_variant);
  $theme_config->save();
}

/**
 * Install SamlAuth
 */
function sdss_profile_update_9501() {
  $config_ignore = \Drupal::configFactory()
    ->getEditable('config_ignore.settings');
  $ignored = $config_ignore->get('ignored_config_entities');
  $ignored[] = 'stanford_samlauth.settings';
  $config_ignore->set('ignored_config_entities', $ignored)->save();
  \Drupal::service('module_installer')->install(['stanford_samlauth']);
}

/**
 * Update menu links on nodes for the updated version of menu_link_weight.
 *
 * @param array $menu_items
 *   Menu items.
 * @param string|null $parent
 *   Parent menu id.
 */
function _sdss_profile_fix_menu(array $menu_items = [], string $parent = NULL): void {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $database = \Drupal::database();

  foreach ($menu_items as $id => $menu_item) {
    /** @var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $link */
    $link = $menu_item->link;
    $url = $link->getUrlObject();

    try {
      if (
        $url->isRouted() &&
        $url->getRouteName() == 'entity.node.canonical'
      ) {
        $node_id = $link->getUrlObject()->getRouteParameters()['node'] ?? NULL;
        /** @var \Drupal\node\NodeInterface $node */
        $node = $node_storage->load($node_id);
        if (!$node->get('field_menulink')->isEmpty()) {
          throw new \Exception('Menu link already exists on node ' . $node->label());
        }

        $menu_field_data = [
          'menu_name' => $link->getMenuName(),
          'title' => $link->getTitle(),
          'description' => $link->getDescription(),
          'parent' => $parent,
          'weight' => $link->getweight(),
          'expanded' => $link->isExpanded(),
        ];
        $changed_time = $node->getChangedTime();
        $node->set('field_menulink', $menu_field_data)->save();
        $new_parent = 'menu_link_field:node_field_menulink_' . $node->uuid() . '_und';

        _sdss_profile_reset_node_changed_time($node, $changed_time);

        if ($menu_item->subtree) {
          _sdss_profile_fix_menu($menu_item->subtree, $new_parent);
        }

        if (!$link->isEnabled()) {
          $database->update('menu_tree')
            ->fields(['enabled' => 0])
            ->condition('id', $new_parent)
            ->execute();
        }

        // Update layout builder settings before deleting the link.
        _sdss_profile_update_menu_block($link->getPluginId(), $new_parent);
        $link->deleteLink();
        continue;
      }
    }
    catch (\Throwable $e) {
      \Drupal::logger('sdss_profile')
        ->error('Unable to update link %title. Error: %error', [
          '%title' => $link->getTitle(),
          '%error' => $e->getMessage(),
        ]);
    }

    if ($parent) {
      $link->updateLink(['parent' => $parent], TRUE);

      // Saving the link above, updates the entity, but it doesn't update the
      // menu tree. So we need to update the menu tree manually.
      $menu_link_manager->updateDefinition($link->getPluginId(), $link->getPluginDefinition(), FALSE);
    }

    if ($menu_item->subtree) {
      _sdss_profile_fix_menu($menu_item->subtree, $id);
    }
  }
}

/**
 * If the old menu link id is configured for menu block parent, update it.
 *
 * @param string $old_id
 *   Old menu link id.
 * @param string $new_id
 *   New menu link id.
 */
function _sdss_profile_update_menu_block(string $old_id, string $new_id): void {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $nids = $node_storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('layout_builder__layout', "%main:$old_id%", 'LIKE')
    ->execute();
  /** @var \Drupal\node\NodeInterface $node */
  foreach ($node_storage->loadMultiple($nids) as $node) {
    $save_node = FALSE;
    $changed_time = $node->getChangedTime();

    /** @var \Drupal\layout_builder\Field\LayoutSectionItemList $layout */
    $layout = $node->get('layout_builder__layout');
    foreach ($layout->getSections() as $section) {
      foreach ($section->getComponents() as $component) {
        $config = $component->get('configuration');
        if ($config['provider'] == 'menu_block' && $config['parent'] == "main:$old_id") {
          $config['parent'] = "main:$new_id";
          $component->setConfiguration($config);
          $save_node = TRUE;
        }
      }
    }
    if ($save_node) {
      $node->save();
      _sdss_profile_reset_node_changed_time($node, $changed_time);
    }
  }
}

/**
 * If the old menu link id is configured for menu block parent, update it.
 *
 * @param string $old_id
 *   Old menu link id.
 * @param string $new_id
 *   New menu link id.
 */
function _stanford_profile_update_menu_block(string $old_id, string $new_id): void {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $nids = $node_storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('layout_builder__layout', "%main:$old_id%", 'LIKE')
    ->execute();
  /** @var \Drupal\node\NodeInterface $node */
  foreach ($node_storage->loadMultiple($nids) as $node) {
    $save_node = FALSE;
    $changed_time = $node->getChangedTime();

    /** @var \Drupal\layout_builder\Field\LayoutSectionItemList $layout */
    $layout = $node->get('layout_builder__layout');
    foreach ($layout->getSections() as $section) {
      foreach ($section->getComponents() as $component) {
        $config = $component->get('configuration');
        if ($config['provider'] == 'menu_block' && $config['parent'] == "main:$old_id") {
          $config['parent'] = "main:$new_id";
          $component->setConfiguration($config);
          $save_node = TRUE;
        }
      }
    }
    if ($save_node) {
      $node->save();
      _stanford_profile_reset_node_changed_time($node, $changed_time);
    }
  }
}

/**
 * Update the node tables to reset the changed time.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 * @param int $changed
 *   Changed time.
 */
function _sdss_profile_reset_node_changed_time(NodeInterface $node, int $changed) {
  $database = \Drupal::database();
  // Reset the changed time to the value before this process.
  $database->update('node_field_data')
    ->fields(['changed' => $changed])
    ->condition('nid', $node->id())
    ->execute();
  $database->update('node_field_revision')
    ->fields(['changed' => $changed])
    ->condition('vid', $node->getRevisionId())
    ->execute();
}

/**
 * Create su_sdss_media_mention field from configuration.
 */
function sdss_profile_update_10001() {
  $config_directory = \Drupal::service('config.storage.sync');
  $field_storage = $config_directory->read('field.storage.node.su_sdss_media_mention');
  $field_config = $config_directory->read('field.field.node.stanford_news.su_sdss_media_mention');

  // Create su_sdss_media_mention field from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }
}

/**
 * Set the Media Mentions field to FALSE on all existing News Nodes.
 */
function sdss_profile_update_10002(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 250);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_media_mention')) {
      continue;
    }
    $node->set('su_sdss_media_mention', FALSE)->save();
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Update configs 'stanford_profile_admin' with 'stanford_profile_admin_theme'.
 */
function sdss_profile_update_10003() {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll() as $config_name) {
    $config = $config_factory->getEditable($config_name);
    // Delete the admin theme blocks first.
    if (str_starts_with($config_name, 'block.block.stanford_profile_admin_')) {
      $config->delete();
      continue;
    }

    // Change the dependencies to the new theme name.
    if ($theme_dependencies = $config->get('dependencies.theme')) {
      $position = array_search('stanford_profile_admin', $theme_dependencies);
      if ($position !== FALSE) {
        $config->set("dependencies.theme.$position", 'stanford_profile_admin_theme')
          ->save(TRUE);
      }
    }
  }

  $core_extension = $config_factory->getEditable('core.extension');
  $core_extension->clear('theme.stanford_profile_admin')
    ->set('theme.stanford_profile_admin_theme', 0)
    ->save();

  $system_theme = $config_factory->getEditable('system.theme');
  if ($system_theme->get('admin') == 'stanford_profile_admin') {
    $system_theme->set('admin', 'stanford_profile_admin_theme')->save();
  }
}

/**
 * Delete all sdss_magazine_topics terms.
 */
function sdss_profile_update_10004() {
  $vid = 'sdss_magazine_topics';
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', $vid)
    ->accessCheck(FALSE)
    ->execute();

  $storage_handler = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $entities = $storage_handler->loadMultiple($tids);
  $storage_handler->delete($entities);
}

/**
 * Uninstall earth_news_importer.
 */
function sdss_profile_update_10005() {
  \Drupal::service('module_installer')->uninstall(['earth_news_importer']);
}

/**
 * Uninstall page_cache.
 */
function sdss_profile_update_10006() {
  \Drupal::service('module_installer')->uninstall(['page_cache']);
}

/**
 * Change layout_paragraphs with white backgrounds to default.
 */
function sdss_profile_update_10007(&$sandbox) {
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  if (!isset($sandbox['count'])) {
    $pids = $paragraph_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_layout')
      ->sort('created')
      ->execute();
    $sandbox['pids'] = $pids;
    $sandbox['count'] = count($sandbox['pids']);
  }

  $paragraph_ids = array_splice($sandbox['pids'], 0, 250);
  /** @var \Drupal\paragraphs\ParagraphInterface[] $paragraph */
  $paragraphs = $paragraph_storage->loadMultiple($paragraph_ids);
  foreach ($paragraphs as $paragraph) {
    $paragraph_config = $paragraph->getBehaviorSetting('layout_paragraphs', 'config');

    if (
      !empty($paragraph_config) &&
      isset($paragraph_config['bg_color']) &&
      $paragraph_config['bg_color'] == 'white'
    ) {
      $behavior_settings = $paragraph->getAllBehaviorSettings();
      $behavior_settings['layout_paragraphs']['config']['bg_color'] = 'none';
      $paragraph->setAllBehaviorSettings($behavior_settings);

      $paragraph->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['pids']) ? 1 : ($sandbox['count'] - count($sandbox['pids'])) / $sandbox['count'];
}

/**
 * Add imported via news sharing field to News.
 */
function sdss_profile_update_10008() {
  $entity_type_manager = \Drupal::entityTypeManager();

  $field_storage = $entity_type_manager->getStorage('field_storage_config');
  if (!$field_storage->load('node.su_sdss_imported_news_sharing')) {
    $field_storage->create([
      'uuid' => '9e91a7b2-54be-4154-b251-b49040727100',
      'field_name' => 'su_sdss_imported_news_sharing',
      'type' => 'boolean',
      'entity_type' => 'node',
      'cardinality' => 1,
    ])->save();

    $field_config_storage = $entity_type_manager->getStorage('field_config');
    $field_config_storage->create([
      'entity_type' => 'node',
      'field_name' => 'su_sdss_imported_news_sharing',
      'bundle' => 'stanford_news',
      'label' => 'Imported via News Sharing',
      'description' => 'This content was imported from another site through News Sharing.',
    ])->save();
  }
}

/**
 * Flag existing content imported via News Sharing.
 */
function sdss_profile_update_10009(&$sandbox) {
  if (!isset($sandbox['count'])) {
    $db = \Drupal::database();
    if ($db->schema()->tableExists('migrate_map_sdss_news_sharing')) {
      $ids = array_keys($db->select('migrate_map_sdss_news_sharing', 'm')
        ->fields('m', ['destid1'])
        ->execute()
        ->fetchAllAssoc('destid1'));
      $sandbox['nids'] = $ids;
      $sandbox['count'] = count($sandbox['nids']);
    } else {
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $node_ids = array_splice($sandbox['nids'], 0, 250);

  if (empty($node_ids)) {
    $sandbox['#finished'] = 1;
    return;
  }

  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_imported_news_sharing')) {
      continue;
    }
    $node->set('su_sdss_imported_news_sharing', TRUE)->save();
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Create su_sdss_featured field from configuration.
 */
function sdss_profile_update_10010() {
  $config_directory = \Drupal::service('config.storage.sync');
  $field_storage = $config_directory->read('field.storage.node.su_sdss_featured');
  $field_config = $config_directory->read('field.field.node.stanford_event.su_sdss_featured');

  // Create su_sdss_featured field from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }
}

/**
 * Set the Featured field to FALSE on all existing Event Nodes.
 */
function sdss_profile_update_10011(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_event')
      ->sort('created')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 250);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_featured')) {
      continue;
    }
    $node->set('su_sdss_featured', FALSE)->save();
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Create su_sdss_explore_more_picker field from configuration.
 */
function sdss_profile_update_10012() {
  $config_directory = \Drupal::service('config.storage.sync');
  $field_storage = $config_directory->read('field.storage.node.su_sdss_explore_more_picker');
  $field_config = $config_directory->read('field.field.node.stanford_news.su_sdss_explore_more_picker');

  // Create su_sdss_explore_more_picker field from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }
}

/**
 * Set default value for the su_sdss_explore_more_picker field on all existing
 * nodes.
 */
function sdss_profile_update_10013(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 250);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  $default_value = [
    0 => [
      'target_id' => 'explore_more_news',
      'display_id' => 'explore_more_random',
      'arguments' => '',
      'items_to_display' => '',
    ]
  ];
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_explore_more_picker')) {
      continue;
    }
    $node->set('su_sdss_explore_more_picker', $default_value)->save();
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Uninstall minimally_branded_subtheme.
 */
function sdss_profile_update_10014() {
  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
  $theme_installer = \Drupal::service('theme_installer');
  try {
    $theme_installer->uninstall(['minimally_branded_subtheme']);
  } catch (\Exception $e) {
    // Theme was already uninstalled.
  }
}

/**
 * Set the Imported via News Sharing field to FALSE on existing News nodes
 * without a set value.
 */
function sdss_profile_update_10015(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created', 'DESC')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 100);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_imported_news_sharing')) {
      continue;
    }
    if ($node->get('su_sdss_imported_news_sharing')->isEmpty()) {
      $node->set('su_sdss_imported_news_sharing', FALSE)->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Set default value for the su_sdss_explore_more_picker field on all existing
 * nodes without a set value.
 */
function sdss_profile_update_10016(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created', 'DESC')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 100);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  $default_value = [
    0 => [
      'target_id' => 'explore_more_news',
      'display_id' => 'explore_more_random',
      'arguments' => '',
      'items_to_display' => '',
    ]
  ];
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_explore_more_picker')) {
      continue;
    }
    if ($node->get('su_sdss_explore_more_picker')->isEmpty()) {
      $node->set('su_sdss_explore_more_picker', $default_value)->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Set the Featured field to FALSE on existing Event nodes without a set value.
 */
function sdss_profile_update_10017(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_event')
      ->sort('created', 'DESC')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 100);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_featured')) {
      continue;
    }
    if ($node->get('su_sdss_featured')->isEmpty()) {
      $node->set('su_sdss_featured', FALSE)->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

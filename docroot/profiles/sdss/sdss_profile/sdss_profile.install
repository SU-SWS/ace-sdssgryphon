<?php

/**
 * @file
 * sdss_profile.install
 */

use Drupal\Core\DrupalKernel;

/**
 * Implements hook_requirements().
 */
function sdss_profile_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {

    $site_path = DrupalKernel::findSitePath(\Drupal::request());
    $site_path = explode('/', $site_path);
    $site_name = $site_path[1];

    $requirements['stanford_site_alias'] = [
      'title' => t('Stanford Site Alias'),
      'value' => $site_name,
      'severity' => REQUIREMENT_INFO,
    ];
  }
  return $requirements;
}

/**
 * Implements hook_update_last_removed().
 */
function sdss_profile_update_last_removed() {
  return 10017;
}

/**
 * Import field configurations with allowed_formats.
 */
function sdss_profile_update_10018() {
  $config_storage = \Drupal::service('config.storage');
  $config_storage_sync = \Drupal::service('config.storage.sync');
  $field_configs = $config_storage_sync->listAll('field.field.');

  foreach ($field_configs as $field_config_name) {
    $field_config = $config_storage_sync->read($field_config_name);

    // Check if the field configuration has 'allowed_formats'.
    if (!isset($field_config['settings']['allowed_formats'])) {
      continue;
    }

    // Check if the field exists in the active configuration.
    $active_config = $config_storage->read($field_config_name);
    if ($active_config !== FALSE) {
      // Import the configuration into active storage.
      $config_storage->write($field_config_name, $field_config);
      \Drupal::logger('sdss_profile')->info('Imported field configuration: @name', ['@name' => $field_config_name]);
    }
  }
}

/**
 * Set the default theme to sdss_subtheme for the sustainability site.
 */
function sdss_profile_update_10019() {
  // Get the current site path.
  $site_path = DrupalKernel::findSitePath(\Drupal::request());
  $site_path_parts = explode('/', $site_path);
  // The site folder is usually the second part (e.g., 'sites/sustainability').
  $site_name = $site_path_parts[1] ?? '';

  if ($site_name === 'sustainability') {
    // Set the default theme.
    \Drupal::configFactory()->getEditable('system.theme')
      ->set('default', 'sdss_subtheme')
      ->save();

    // Set the active theme in state (for runtime changes).
    \Drupal::state()->set('theme.default', 'sdss_subtheme');

    // Enable theme settings: desktop_hamburger and display_utility_navigation.
    $theme_settings = \Drupal::configFactory()->getEditable('sdss_subtheme.settings');
    $theme_settings
      ->set('desktop_hamburger', TRUE)
      ->set('display_utility_navigation', TRUE)
      ->save();

    \Drupal::logger('sdss_profile')->info('Default and active theme set to sdss_subtheme for sustainability site. Theme settings desktop_hamburger and display_utility_navigation enabled.');
  }
}

/**
 * Add sdss:webdev role mapping.
 *
 * This update adds a new role mapping to the su_simplesaml_roles configuration
 * on the stanford_saml config page. It maps the 'administrator' role to users
 * with the 'eduPersonEntitlement' attribute containing 'sdss:webdev'.
 */
function sdss_profile_update_10020() {
  $config_page = \Drupal::entityTypeManager()
    ->getStorage('config_pages')
    ->load('stanford_saml');
  if ($config_page) {
    $roles = $config_page->get('su_simplesaml_roles') ?: '';
    $mappings = array_filter(explode('|', is_object($roles) && method_exists($roles, 'getString') ? $roles->getString() : (string) $roles));
    $new_mapping = 'administrator:eduPersonEntitlement,=,sdss:webdev';
    if (!in_array($new_mapping, $mappings)) {
      $mappings[] = $new_mapping;
      $config_page->set('su_simplesaml_roles', implode('|', $mappings));
      $config_page->save();
      \Drupal::logger('sdss_profile')->info('Mapping added to su_simplesaml_roles by update_10020.');
    }
    else {
      \Drupal::logger('sdss_profile')->info('Mapping already present in su_simplesaml_roles by update_10020.');
    }
  }
  else {
    \Drupal::logger('sdss_profile')->warning('stanford_saml config page not found in update_10020.');
  }
}

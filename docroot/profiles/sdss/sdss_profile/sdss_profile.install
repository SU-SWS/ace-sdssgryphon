<?php

/**
 * @file
 * sdss_profile.install
 */

use Drupal\Core\DrupalKernel;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_requirements().
 */
function sdss_profile_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {

    $site_path = DrupalKernel::findSitePath(\Drupal::request());
    $site_path = explode('/', $site_path);
    $site_name = $site_path[1];

    $requirements['stanford_site_alias'] = [
      'title' => t('Stanford Site Alias'),
      'value' => $site_name,
      'severity' => REQUIREMENT_INFO,
    ];
  }
  return $requirements;
}

/**
 * Implements hook_update_last_removed().
 */
function sdss_profile_update_last_removed() {
  return 9501;
}

/**
 * Create su_sdss_media_mention field from configuration.
 */
function sdss_profile_update_10001() {
  $config_directory = \Drupal::service('config.storage.sync');
  $field_storage = $config_directory->read('field.storage.node.su_sdss_media_mention');
  $field_config = $config_directory->read('field.field.node.stanford_news.su_sdss_media_mention');

  // Create su_sdss_media_mention field from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }
}

/**
 * Set the Media Mentions field to FALSE on all existing News Nodes.
 */
function sdss_profile_update_10002(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 250);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_media_mention')) {
      continue;
    }
    $node->set('su_sdss_media_mention', FALSE)->save();
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Update configs 'stanford_profile_admin' with 'stanford_profile_admin_theme'.
 */
function sdss_profile_update_10003() {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll() as $config_name) {
    $config = $config_factory->getEditable($config_name);
    // Delete the admin theme blocks first.
    if (str_starts_with($config_name, 'block.block.stanford_profile_admin_')) {
      $config->delete();
      continue;
    }

    // Change the dependencies to the new theme name.
    if ($theme_dependencies = $config->get('dependencies.theme')) {
      $position = array_search('stanford_profile_admin', $theme_dependencies);
      if ($position !== FALSE) {
        $config->set("dependencies.theme.$position", 'stanford_profile_admin_theme')
          ->save(TRUE);
      }
    }
  }

  $core_extension = $config_factory->getEditable('core.extension');
  $core_extension->clear('theme.stanford_profile_admin')
    ->set('theme.stanford_profile_admin_theme', 0)
    ->save();

  $system_theme = $config_factory->getEditable('system.theme');
  if ($system_theme->get('admin') == 'stanford_profile_admin') {
    $system_theme->set('admin', 'stanford_profile_admin_theme')->save();
  }
}

/**
 * Delete all sdss_magazine_topics terms.
 */
function sdss_profile_update_10004() {
  $vid = 'sdss_magazine_topics';
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', $vid)
    ->accessCheck(FALSE)
    ->execute();

  $storage_handler = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $entities = $storage_handler->loadMultiple($tids);
  $storage_handler->delete($entities);
}

/**
 * Uninstall earth_news_importer.
 */
function sdss_profile_update_10005() {
  \Drupal::service('module_installer')->uninstall(['earth_news_importer']);
}

/**
 * Uninstall page_cache.
 */
function sdss_profile_update_10006() {
  \Drupal::service('module_installer')->uninstall(['page_cache']);
}

/**
 * Change layout_paragraphs with white backgrounds to default.
 */
function sdss_profile_update_10007(&$sandbox) {
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  if (!isset($sandbox['count'])) {
    $pids = $paragraph_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_layout')
      ->sort('created')
      ->execute();
    $sandbox['pids'] = $pids;
    $sandbox['count'] = count($sandbox['pids']);
  }

  $paragraph_ids = array_splice($sandbox['pids'], 0, 250);
  /** @var \Drupal\paragraphs\ParagraphInterface[] $paragraph */
  $paragraphs = $paragraph_storage->loadMultiple($paragraph_ids);
  foreach ($paragraphs as $paragraph) {
    $paragraph_config = $paragraph->getBehaviorSetting('layout_paragraphs', 'config');

    if (
      !empty($paragraph_config) &&
      isset($paragraph_config['bg_color']) &&
      $paragraph_config['bg_color'] == 'white'
    ) {
      $behavior_settings = $paragraph->getAllBehaviorSettings();
      $behavior_settings['layout_paragraphs']['config']['bg_color'] = 'none';
      $paragraph->setAllBehaviorSettings($behavior_settings);

      $paragraph->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['pids']) ? 1 : ($sandbox['count'] - count($sandbox['pids'])) / $sandbox['count'];
}

/**
 * Add imported via news sharing field to News.
 */
function sdss_profile_update_10008() {
  $entity_type_manager = \Drupal::entityTypeManager();

  $field_storage = $entity_type_manager->getStorage('field_storage_config');
  if (!$field_storage->load('node.su_sdss_imported_news_sharing')) {
    $field_storage->create([
      'uuid' => '9e91a7b2-54be-4154-b251-b49040727100',
      'field_name' => 'su_sdss_imported_news_sharing',
      'type' => 'boolean',
      'entity_type' => 'node',
      'cardinality' => 1,
    ])->save();

    $field_config_storage = $entity_type_manager->getStorage('field_config');
    $field_config_storage->create([
      'entity_type' => 'node',
      'field_name' => 'su_sdss_imported_news_sharing',
      'bundle' => 'stanford_news',
      'label' => 'Imported via News Sharing',
      'description' => 'This content was imported from another site through News Sharing.',
    ])->save();
  }
}

/**
 * Flag existing content imported via News Sharing.
 */
function sdss_profile_update_10009(&$sandbox) {
  if (!isset($sandbox['count'])) {
    $db = \Drupal::database();
    if ($db->schema()->tableExists('migrate_map_sdss_news_sharing')) {
      $ids = array_keys($db->select('migrate_map_sdss_news_sharing', 'm')
        ->fields('m', ['destid1'])
        ->execute()
        ->fetchAllAssoc('destid1'));
      $sandbox['nids'] = $ids;
      $sandbox['count'] = count($sandbox['nids']);
    }
    else {
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $node_ids = array_splice($sandbox['nids'], 0, 250);

  if (empty($node_ids)) {
    $sandbox['#finished'] = 1;
    return;
  }

  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_imported_news_sharing')) {
      continue;
    }
    $node->set('su_sdss_imported_news_sharing', TRUE)->save();
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Create su_sdss_featured field from configuration.
 */
function sdss_profile_update_10010() {
  $config_directory = \Drupal::service('config.storage.sync');
  $field_storage = $config_directory->read('field.storage.node.su_sdss_featured');
  $field_config = $config_directory->read('field.field.node.stanford_event.su_sdss_featured');

  // Create su_sdss_featured field from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }
}

/**
 * Set the Featured field to FALSE on all existing Event Nodes.
 */
function sdss_profile_update_10011(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_event')
      ->sort('created')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 250);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_featured')) {
      continue;
    }
    $node->set('su_sdss_featured', FALSE)->save();
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Create su_sdss_explore_more_picker field from configuration.
 */
function sdss_profile_update_10012() {
  $config_directory = \Drupal::service('config.storage.sync');
  $field_storage = $config_directory->read('field.storage.node.su_sdss_explore_more_picker');
  $field_config = $config_directory->read('field.field.node.stanford_news.su_sdss_explore_more_picker');

  // Create su_sdss_explore_more_picker field from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }
}

/**
 * Set default value for su_sdss_explore_more_picker field on existing nodes.
 */
function sdss_profile_update_10013(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 250);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  $default_value = [
    0 => [
      'target_id' => 'explore_more_news',
      'display_id' => 'explore_more_random',
      'arguments' => '',
      'items_to_display' => '',
    ],
  ];
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_explore_more_picker')) {
      continue;
    }
    $node->set('su_sdss_explore_more_picker', $default_value)->save();
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Uninstall minimally_branded_subtheme.
 */
function sdss_profile_update_10014() {
  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
  $theme_installer = \Drupal::service('theme_installer');
  try {
    $theme_installer->uninstall(['minimally_branded_subtheme']);
  }
  catch (\Exception $e) {
    // Theme was already uninstalled.
  }
}

/**
 * Set su_sdss_imported_news_sharing default value.
 *
 * Set the Imported via News Sharing field to FALSE on existing News nodes
 * without a set value.
 */
function sdss_profile_update_10015(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created', 'DESC')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 100);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_imported_news_sharing')) {
      continue;
    }
    if ($node->get('su_sdss_imported_news_sharing')->isEmpty()) {
      $node->set('su_sdss_imported_news_sharing', FALSE)->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Set su_sdss_explore_more_picker default values.
 *
 * Set default value for the su_sdss_explore_more_picker field on all existing
 * nodes without a set value.
 */
function sdss_profile_update_10016(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_news')
      ->sort('created', 'DESC')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 100);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  $default_value = [
    0 => [
      'target_id' => 'explore_more_news',
      'display_id' => 'explore_more_random',
      'arguments' => '',
      'items_to_display' => '',
    ],
  ];
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_explore_more_picker')) {
      continue;
    }
    if ($node->get('su_sdss_explore_more_picker')->isEmpty()) {
      $node->set('su_sdss_explore_more_picker', $default_value)->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

/**
 * Set the Featured field to FALSE on existing Event nodes without a set value.
 */
function sdss_profile_update_10017(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()
    ->getStorage('node');
  if (!isset($sandbox['count'])) {
    $nids = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'stanford_event')
      ->sort('created', 'DESC')
      ->execute();
    $sandbox['nids'] = $nids;
    $sandbox['count'] = count($sandbox['nids']);
  }

  $node_ids = array_splice($sandbox['nids'], 0, 100);
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $node_storage->loadMultiple($node_ids);
  foreach ($nodes as $node) {
    if (!$node->hasField('su_sdss_featured')) {
      continue;
    }
    if ($node->get('su_sdss_featured')->isEmpty()) {
      $node->set('su_sdss_featured', FALSE)->save();
    }
  }

  $sandbox['#finished'] = empty($sandbox['nids']) ? 1 : ($sandbox['count'] - count($sandbox['nids'])) / $sandbox['count'];
}

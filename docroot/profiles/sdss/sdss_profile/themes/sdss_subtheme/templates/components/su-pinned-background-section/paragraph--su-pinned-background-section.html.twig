{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'su-pinned-background-section',
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }} id = "{{ paragraph.id() }}">
    {% block content %}
      {% for key, item in content.su_slides['#items'] %}
        {% set slide = item.entity %}
        {% set bg = file_url(slide.su_background.entity.field_media_image.entity.fileuri) %}
        <div class = "su-pinned-slide {% if key == 0 %}first{% endif %}" style = "background-image: url('{{ bg }}')">
          <div class = "su-pinned-slide__inner">
            {{ slide.su_wysiwyg_text.value|raw }}
          </div>
          <div class = "su-pinned-slide__bottom">
            {% set button = slide.su_entity_button.0 %}
            {% if button %}
              {% if button.url.external %}
                <a class = "su-pinned-slide__button" href="{{ button.url.uri }}">
                  {{ button.title }}
                </a>
              {% else %}
                <a class = "su-pinned-slide__button" href="{{ path(button.url.routeName, button.url.routeParameters) }}">
                  {{ button.title }}
                </a>
              {% endif %}
            {% endif %}
          </div>
        </div>
      {% endfor %}
    {% endblock %}
  </div>

  <script>
    gsap.registerPlugin(ScrollTrigger);
    gsap.registerPlugin(SplitText);

    window.addEventListener('load', function() {
      const pinnedSection = document.getElementById('{{ paragraph.id() }}');
      const slides = pinnedSection.querySelectorAll('.su-pinned-slide');

      let pinnedTL = gsap.timeline({
        scrollTrigger: {
          trigger: pinnedSection,
          pin: true, // pin the trigger element while active
          start: 'top top', // when the top of the trigger hits the top of the viewport
          end: `+=${1500 * slides.length}`, // end after scrolling 500px beyond the start
          scrub: 1, // smooth scrubbing, takes 1 second to "catch up" to the scrollbar
        }
      });

      let x = 0;

      for(const slide of slides) {

        pinnedTL.addLabel('slide' + x)

        if(!slide.classList.contains('first')) {
          pinnedTL.to(slide, { y: '-100%', duration: 0.5, ease: 'power2.inOut' }, '+=0');
        }

        let title = slide.querySelector('h2');

        if(title) {
      
          let titleSplit = SplitText.create(title, {
            type: "lines",
            mask: "lines",
          });

          pinnedTL.set(title, { opacity: 1 }, 0);

          pinnedTL.fromTo(titleSplit.lines, {
            opacity: 0,
            y: '100%'
          },
          {
            opacity: 1,
            y: '0%',
            duration: 0.5,
            ease: 'power2.inOut'
          }, slide.classList.contains('first') ? '+=0' : '-=0.3');

        }

        let p = slide.querySelector('p');

        if(p) {
          pinnedTL.fromTo(p, { opacity: 0 }, { opacity: 1, duration: 0.2, ease: 'power2.inOut' }, '-=0.3');
        }

        let btn = slide.querySelector('.su-pinned-slide__button');

        if(btn) {
          pinnedTL.fromTo(btn, { opacity: 0 }, { opacity: 1, duration: 0.2, ease: 'power2.inOut' }, '-=0.3');
        }

        x++;

      }

    });
  </script>
{% endblock paragraph %}

{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('sdss_subtheme/gsap') }}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'su-departments-slider',
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }} id = "{{ paragraph.id() }}">
    {% block content %}
      <div class = "su-departments-slider__inner">
        <div class = "su-departments-slider__header">
          <h2>{{ content.su_title.0['#context'].value }}</h2>
          {% set button = content.su_entity_button.0 %}
          {% if button %}
            {% if button['#url'].external %}
              <a class = "su-departments-slider__header__button" href="{{ button['#url'].uri }}">
                {{ button['#title'] }}
              </a>
            {% else %}
              <a class = "su-departments-slider__header__button" href="{{ path(button['#url'].routeName, button['#url'].routeParameters) }}">
                {{ button['#title'] }}
              </a>
            {% endif %}
          {% endif %}
        </div>
        <div class = "su-departments-slider__track">
          {% for key, item in content.su_department_slides['#items'] %}
            {% set slide = item.entity %}
            {% set button = slide.su_entity_button.0 %}
            {% set image = file_url(slide.su_image.entity.field_media_image.entity.fileuri) %}
            <div class = "su-department-slide">
              <div>
                {% if button %}
                  {% if button.url.external %}
                    <a href = "{{ button.url.uri }}" class = "su-department-slide__video-link">
                  {% else %}
                    <a href = "{{ path(button.url.routeName, button.url.routeParameters) }}" class = "su-department-slide__video-link">
                  {% endif %}
                {% endif %}
                  <div style = "background-image: url('{{ image }}')" class = "su-department-slide__image"></div>
                {% if button %}
                  </a>
                {% endif %}
                <h3 class = "su-department-slide__title">
                  {{ slide.su_title.value }}
                </h3>
              </div>
              <div>
                <div class = "su-department-slide__bar"></div>
                {% if button %}
                  {% if button.url.external %}
                    <a class = "su-department-slide__button" href="{{ button.url.uri }}">
                      {{ button.title }}
                    </a>
                  {% else %}
                    <a class = "su-department-slide__button" href="{{ path(button.url.routeName, button.url.routeParameters) }}">
                      {{ button.title }}
                    </a>
                  {% endif %}
                {% endif %}
              </div>
            </div>
          {% endfor %}
        </div>
      </div>
    {% endblock %}
  </div>

  <script>
    gsap.registerPlugin(ScrollTrigger);
    gsap.registerPlugin(SplitText);
    const pinnedSection = document.getElementById('{{ paragraph.id() }}');
    const slides = pinnedSection.querySelectorAll('.su-department-slide');
    const track = pinnedSection.querySelector('.su-departments-slider__track');
    let pinnedTL, trackOffsetTween;

    window.addEventListener('load', function() {

      function getNextSiblings(elem, limit = 0) {
        var sibs = [];
        let x = 0;
        while (elem = elem.nextSibling) {
            if (elem.nodeType === 3) continue; // text node
            if(limit > 0 && x >= limit) break;
            sibs.push(elem);
            x++;
        }
        return sibs;
      }

      const sliderParent = pinnedSection.closest('.paragraph-item');

      const allPinnedElements = getNextSiblings(sliderParent, 3);

      let wrapper = document.createElement('div');
      wrapper.id = "paragraph-pin-wrapper";

      document.querySelector('.stanford-page').insertBefore(wrapper, sliderParent);

      wrapper.appendChild(sliderParent);

      for(const el of allPinnedElements) {
        wrapper.appendChild(el);
      }
      
      pinnedTL = gsap.timeline({
        scrollTrigger: {
          trigger: pinnedSection,
          pin: wrapper, // pin the trigger element while active
          start: 'top top', // when the top of the trigger hits the top of the viewport
          end: `+=${(250 * slides.length) + 150}`, // end after scrolling 500px beyond the start
          scrub: 1, // smooth scrubbing, takes 1 second to "catch up" to the scrollbar
          pinSpacing: true,
          invalidateOnRefresh: true
        }
      });
      for(const twoCol of document.querySelectorAll(".layout--layout-paragraphs-two-column")) {
          let twoColTL = gsap.timeline({
              paused: true,
              scrollTrigger: {
                  trigger: pinnedSection,
                  start: `+=${(250 * slides.length) + 350}`,
                  toggleActions: "play none none none",
                  pin: false,
              }
          });
          twoColTL.fromTo(twoCol.querySelectorAll(".su-card"), { opacity: 0, y: 80 }, { opacity: 1, y: 0, duration: .6, delay: .2, stagger: 0.2, ease: 'power2.easeOut' });
      }

      let x = 0;

      const trackOffset = () => {

        let trackRect = track.getBoundingClientRect();
        let lastSlideRect = document.querySelector('.su-department-slide:last-child').getBoundingClientRect();

        // return the distance outside the track
        return lastSlideRect.right - trackRect.right;
      }
      
      trackOffsetTween = pinnedTL.to(track, { x: () => -trackOffset(), duration: slides.length, ease: 'none', overwrite: "auto" }, '+=0');

      pinnedTL.to({}, { duration: 0.6 }, '+=0');

    });

    window.addEventListener('resize', function() {

      ScrollTrigger.refresh();

    });
  </script>
{% endblock paragraph %}

{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'su-image-cta',
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }} id = "{{ paragraph.id() }}">
    {% block content %}
      {% set bg = file_url(paragraph.su_background.entity.field_media_image.entity.fileuri) %}
      <div class = "su-image-cta__inner" style = "background-image: url('{{ bg }}')">
        <div class = "su-image-cta__subtitle">{{ content.su_subtitle.0['#context'].value }}</div>
        <h2 class = "su-image-cta__title">{{ content.su_title.0['#context'].value }}</h2>
        <div class = "su-image-cta__bottom">
          {% set button = content.su_entity_button.0 %}
          {% if button %}
            {% if button['#url'].external %}
              <a class = "su-image-cta__learn-more su-image-cta__button" href="{{ button['#url'].uri }}">
                {{ button['#title'] }}
              </a>
            {% else %}
              <a class = "su-image-cta__learn-more su-image-cta__button" href="{{ path(button['#url'].routeName, button['#url'].routeParameters) }}">
                {{ button['#title'] }}
              </a>
            {% endif %}
          {% endif %}
          <div class = "su-image-cta__bar"></div>
          {% set popup = content.su_video_popup_button.0 %}
          {% if popup %}
            {% if popup['#url'].external %}
              {% set raw_url = popup['#url'].uri %}

              {# Handle youtu.be short links #}
              {% if 'youtu.be' in raw_url %}
                {% set youtubeid = raw_url|split('/')|last %}
              {% else %}
                {# Handle youtube.com/watch?v=...&t=... style #}
                {% set after_v = raw_url|split('v=')[1] %}
                {% set youtubeid = after_v|split('&')[0] %}
              {% endif %}
              <div class = "su-image-cta__watch-now su-image-cta__button su-link--popup" tabindex = "0" data-video = "{{ youtubeid }}">
                {{ popup['#title'] }}
                <svg width="13" height="18" viewBox="0 0 13 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M10.7728 9.30783L1.20703 2.79681L1.20703 15.8188L10.7728 9.30783Z" stroke="white" stroke-width="2"/>
                </svg>
              </div>
            {% endif %}
          {% endif %}
        </div>
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}

{% include '@sdss_subtheme/templates/components/popup/su-popup.html.twig' %}
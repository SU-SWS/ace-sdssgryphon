<?php
/**
 * @file
 * Preprocess functions for SDSS Subtheme.
 */

use Drupal\node\NodeInterface;

/**
 * Prepares variables for the html.html.twig template.
 */
function sdss_subtheme_preprocess_html(&$variables) {
  $variables['stanford_basic_path'] = \Drupal::service('extension.list.theme')->getPath('stanford_basic');
  // Variant setting for the header layout.
  if ($header_layout_variant = theme_get_setting('header_layout_variant')) {
    $variables['attributes']['class'][] = 'sdss-header-variant--' . $header_layout_variant;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function sdss_subtheme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['#id']) && $variables['elements']['#id'] == 'sdss_subtheme_search') {
    $suggestions[] = 'block__stanford_basic_search';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sdss_subtheme_preprocess_ds_entity_view(&$variables) {

  // if not running on a paragraph, exit out.
  if (!isset($variables['content']['#paragraph'])) {
    return;
  }

  $paragraph = $variables['content']['#paragraph'];

  // Process Cards
  if ($paragraph->bundle() == 'stanford_card') {
    sdss_subtheme_preprocess_card($variables);
  }

  // Process Banners
  if ($paragraph->bundle() == 'stanford_banner') {
    sdss_subtheme_preprocess_banner($variables);
  }

}

/**
 * Implements hook_preprocess_card().
 */
function sdss_subtheme_preprocess_card(&$variables) {

  $paragraph = $variables['content']['#paragraph'];

  // Add border style class to card wrapper.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:card_variant_info', 'card_border_style', 'sdss-card-wrapper--border-none');

  // Add card style class to card wrapper.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:card_variant_info', 'card_style', 'sdss-card-wrapper--topic');

  $card_info = [];

  // Add card type class to card wrapper. 3rd variable provides the default card type.
  $card_info['card_type'] = $paragraph->getBehaviorSetting('react_paragraphs:card_variant_info', 'card_type', 'sdss-card-wrapper--default');
  $variables['attributes']['class'][] = $card_info['card_type'];

  $imageCount = $paragraph->get('su_card_media')->count();

  // Check for media in a card then set classes.
  if (!$imageCount) {
    return;
  }
}

/**
 * Implements hook_preprocess_banner().
 */
function sdss_subtheme_preprocess_banner(&$variables) {

  $paragraph = $variables['content']['#paragraph'];

  // Add button color style class to card wrapper.
  //$variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_button_style', 'sdss-wrapper--button-green');

  // Add banner type class to card wrapper. 3rd variable provides the default type.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_style', 'sdss-banner-wrapper--default');

  // Center align the headline. 3rd variable provides the default type.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_headline', 'sdss-banner-wrapper--headline-default');

  // Select height of banner. 3rd variable provides the default type.
  $variables['attributes']['class'][] = $paragraph->getBehaviorSetting('react_paragraphs:banner_variant_info', 'banner_list_height', 'sdss-banner-wrapper--height-default');
}

/**
 * Implements hook_preprocess_field().
 */
function sdss_subtheme_preprocess_field(&$variables) {

 if ($variables['element']['#field_name'] == 'su_para_row_bgcolor') {
    $su_paragraph_row__bgcolor = $variables['items'][0]['content']['#markup'];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function sdss_subtheme_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'menu_block:newsroom') {
    $variables['attributes']['data-island'] = 'newsroom-menu-island';
    $variables['#attached']['library'][] = 'sdss_subtheme/decoupled_menu';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function sdss_subtheme_preprocess_page(&$vars) {
  // Override the variant settings for the brand bar and global footer.
  // These need to allows be the "dark" variants for the SDSS subtheme.
  $vars['brand_bar_variant'] = 'su-brand-bar--dark';
  $vars['global_footer_variant'] = 'su-global-footer--dark';

  // Implement full-width basic page styles
  if (
    isset($vars['node']) &&
    $vars['node'] instanceof NodeInterface &&
    $vars['node']->bundle() == 'stanford_page' &&
    $vars['node']->hasField('layout_selection') &&
    $vars['node']->get('layout_selection')->getString() == 'stanford_basic_page_full'
  ) {
    $vars['#attached']['library'][] = 'sdss_subtheme/basic-page-full-width';
  }
}

/**
 * Implements hook_preprocess_lists().
 */
function sdss_subtheme_preprocess_paragraph__stanford_lists(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = &$variables['paragraph'];
  $existing_classes = $variables['attributes']['class'] ?? [];
  $extra_classes = [
    $paragraph->getBehaviorSetting('react_paragraphs:lists_variant_info', 'grid_rows'),
  ];
  $variables['attributes']['class'] = array_merge($existing_classes, $extra_classes);
}

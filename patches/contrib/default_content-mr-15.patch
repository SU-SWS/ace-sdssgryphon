From c65e1a2981afaa11255fda1a6580825158f0c1dd Mon Sep 17 00:00:00 2001
From: Emil Johnsson <emil@kodamera.se>
Date: Tue, 1 Feb 2022 13:09:02 +0100
Subject: [PATCH 1/4] Applied patch from #37 by heddn

---
 src/Normalizer/ContentEntityNormalizer.php | 38 ++++++++++++++++++++++
 1 file changed, 38 insertions(+)

diff --git a/src/Normalizer/ContentEntityNormalizer.php b/src/Normalizer/ContentEntityNormalizer.php
index 4d5a932..aaa036a 100644
--- a/src/Normalizer/ContentEntityNormalizer.php
+++ b/src/Normalizer/ContentEntityNormalizer.php
@@ -23,6 +23,8 @@ use Drupal\pathauto\PathautoState;
 use Drupal\serialization\Normalizer\SerializedColumnNormalizerTrait;
 use Drupal\user\UserInterface;
 use Symfony\Component\Serializer\Exception\UnexpectedValueException;
+use Drupal\layout_builder\Section;
+use Drupal\layout_builder\Plugin\DataType\SectionData;
 
 /**
  * Normalizes and denormalizes content entities.
@@ -253,6 +255,22 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
           }
           $property->setValue($target_entity);
         }
+        elseif ($property instanceof SectionData) {
+          // Rebuild references on layout_builder.
+          foreach ($value['components'] as $key => $component) {
+            if (isset($component['configuration']['id'])) {
+              [$component_type] = explode(PluginBase::DERIVATIVE_SEPARATOR, $component['configuration']['id']);
+              if ($component_type == 'inline_block') {
+                $target_uuid = $component['additional']['target_uuid'] ?? NULL;
+                if ($target_uuid && $block_content = $this->entityRepository->loadEntityByUuid('block_content', $target_uuid)) {
+                  $value['components'][$key]['configuration']['block_revision_id'] = $block_content->getRevisionId();
+                }
+              }
+            }
+          }
+          $section_value = Section::fromArray($value);
+          $property->setValue($section_value);
+        }
         else {
           $property->setValue($value);
         }
@@ -419,6 +437,26 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
         $value = $target->uuid();
       }
     }
+    elseif ($property instanceof SectionData && $property->getValue() instanceof Section) {
+      $value = $property->getValue()->toArray();
+
+      // Layout Sections reference inline blocks by id, we need to reference by
+      // UUID and make sure the section has a dependency on the inline_block.
+      foreach ($value['components'] as $key => $component) {
+        if (isset($component['configuration']['id'])) {
+          // This is only valid for inline_block.
+          [$component_type, $component_bundle] = explode(PluginBase::DERIVATIVE_SEPARATOR, $component['configuration']['id']);
+          if ($component_type == 'inline_block') {
+            $block_revision_id = $component['configuration']['block_revision_id'];
+            $block_content = $this->entityTypeManager->getStorage('block_content')->loadRevision($block_revision_id);
+            if ($block_content) {
+              $value['components'][$key]['additional']['target_uuid'] = $block_content->uuid();
+              $this->addDependency($block_content);
+            }
+          }
+        }
+      }
+    }
     elseif ($property instanceof Uri) {
       $value = $property->getValue();
       $scheme = parse_url($value, PHP_URL_SCHEME);
-- 
GitLab


From e15cf2c278a8b8848ccca0ee4cae732890588d17 Mon Sep 17 00:00:00 2001
From: Emil Johnsson <emil@kodamera.se>
Date: Tue, 1 Feb 2022 13:09:10 +0100
Subject: [PATCH 2/4] Applied patch from #41 by S3b0uN3t (with code cleanup)

---
 src/Exporter.php | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/src/Exporter.php b/src/Exporter.php
index 6237457..b80dae2 100644
--- a/src/Exporter.php
+++ b/src/Exporter.php
@@ -11,6 +11,7 @@ use Drupal\Core\Serialization\Yaml;
 use Drupal\default_content\Event\DefaultContentEvents;
 use Drupal\default_content\Event\ExportEvent;
 use Drupal\default_content\Normalizer\ContentEntityNormalizerInterface;
+use Drupal\layout_builder\Plugin\Block\InlineBlock;
 use Drupal\user\UserInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 
@@ -199,6 +200,28 @@ class Exporter implements ExporterInterface {
   protected function getEntityReferencesRecursive(ContentEntityInterface $entity, $depth = 0, array &$indexed_dependencies = []) {
     $entity_dependencies = $entity->referencedEntities();
 
+    // Get dependencies from layout builder.
+    if ($entity->hasField('layout_builder__layout')) {
+      $section_data = $entity->get('layout_builder__layout');
+      foreach ($section_data->getSections() as $section) {
+        $components = $section->getComponents();
+        foreach ($components as $component) {
+          $plugin = $component->getPlugin();
+          if ($plugin instanceof InlineBlock) {
+            $configuration = $component->get('configuration');
+            if (!empty($block_revision_id = $configuration['block_revision_id'])) {
+              $block_content = $this->entityTypeManager
+                ->getStorage('block_content')
+                ->loadRevision($block_revision_id);
+              if ($block_content) {
+                $entity_dependencies[] = $block_content;
+              }
+            }
+          }
+        }
+      }
+    }
+
     foreach ($entity_dependencies as $dependent_entity) {
       // Config entities should not be exported but rather provided by default
       // config.
-- 
GitLab


From e18366bc4b733eaf15973296d110937bf3ba9b31 Mon Sep 17 00:00:00 2001
From: Florent Torregrosa
 <14238-florenttorregrosa@users.noreply.drupalcode.org>
Date: Tue, 6 Dec 2022 15:08:16 +0100
Subject: [PATCH 3/4] Issue #3160146 by Grimreaper: Remove unused variable,
 triggering warnings with non-derivative block plugins.

---
 src/Normalizer/ContentEntityNormalizer.php | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Normalizer/ContentEntityNormalizer.php b/src/Normalizer/ContentEntityNormalizer.php
index aaa036a..71152d5 100644
--- a/src/Normalizer/ContentEntityNormalizer.php
+++ b/src/Normalizer/ContentEntityNormalizer.php
@@ -445,7 +445,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
       foreach ($value['components'] as $key => $component) {
         if (isset($component['configuration']['id'])) {
           // This is only valid for inline_block.
-          [$component_type, $component_bundle] = explode(PluginBase::DERIVATIVE_SEPARATOR, $component['configuration']['id']);
+          [$component_type] = explode(PluginBase::DERIVATIVE_SEPARATOR, $component['configuration']['id']);
           if ($component_type == 'inline_block') {
             $block_revision_id = $component['configuration']['block_revision_id'];
             $block_content = $this->entityTypeManager->getStorage('block_content')->loadRevision($block_revision_id);
-- 
GitLab


From 5c727c9576b2f6b386a141febb55f2e9798fe6a2 Mon Sep 17 00:00:00 2001
From: CRZDEV <skillcaz@gmail.com>
Date: Sun, 10 Mar 2024 19:51:08 +0100
Subject: [PATCH 4/4] Issue #3160146: Layout builder sections fields normalizer
 / denormalizer avoid direct dependency & manage also block serialized
 references

---
 src/Exporter.php                           | 33 +++++++------
 src/Normalizer/ContentEntityNormalizer.php | 54 +++++++++++-----------
 2 files changed, 44 insertions(+), 43 deletions(-)

diff --git a/src/Exporter.php b/src/Exporter.php
index b80dae2..0102a27 100644
--- a/src/Exporter.php
+++ b/src/Exporter.php
@@ -11,9 +11,9 @@ use Drupal\Core\Serialization\Yaml;
 use Drupal\default_content\Event\DefaultContentEvents;
 use Drupal\default_content\Event\ExportEvent;
 use Drupal\default_content\Normalizer\ContentEntityNormalizerInterface;
-use Drupal\layout_builder\Plugin\Block\InlineBlock;
 use Drupal\user\UserInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\TypedData\TypedDataInternalPropertiesHelper;
 
 /**
  * A service for handling import of default content.
@@ -200,20 +200,23 @@ class Exporter implements ExporterInterface {
   protected function getEntityReferencesRecursive(ContentEntityInterface $entity, $depth = 0, array &$indexed_dependencies = []) {
     $entity_dependencies = $entity->referencedEntities();
 
-    // Get dependencies from layout builder.
-    if ($entity->hasField('layout_builder__layout')) {
-      $section_data = $entity->get('layout_builder__layout');
-      foreach ($section_data->getSections() as $section) {
-        $components = $section->getComponents();
-        foreach ($components as $component) {
-          $plugin = $component->getPlugin();
-          if ($plugin instanceof InlineBlock) {
-            $configuration = $component->get('configuration');
-            if (!empty($block_revision_id = $configuration['block_revision_id'])) {
-              $block_content = $this->entityTypeManager
-                ->getStorage('block_content')
-                ->loadRevision($block_revision_id);
-              if ($block_content) {
+    foreach (TypedDataInternalPropertiesHelper::getNonInternalProperties($entity->getTypedData()) as $name => $field_items) {
+      if (is_a($field_items, 'Drupal\layout_builder\SectionListInterface')) {
+        foreach ($field_items->getSections() as $section) {
+          $components = $section->getComponents();
+          foreach ($components as $component) {
+            $plugin = $component->getPlugin();
+            if (is_a($plugin, 'Drupal\layout_builder\Plugin\Block\InlineBlock')) {
+              $reflectionMethod = new \ReflectionMethod($plugin, 'getEntity');
+              $reflectionMethod->setAccessible(TRUE);
+              $block_content = $reflectionMethod->invoke($plugin);
+              $configuration = $component->get('configuration');
+              // Look for any inner references.
+              if (!empty($configuration['block_serialized']) && empty($block_content->id())) {
+                $indexed_dependencies += $this->getEntityReferencesRecursive($block_content, $depth, $indexed_dependencies);
+              }
+              // Add direct dependency.
+              elseif(!empty($configuration['block_revision_id'])) {
                 $entity_dependencies[] = $block_content;
               }
             }
diff --git a/src/Normalizer/ContentEntityNormalizer.php b/src/Normalizer/ContentEntityNormalizer.php
index 71152d5..93e8a2a 100644
--- a/src/Normalizer/ContentEntityNormalizer.php
+++ b/src/Normalizer/ContentEntityNormalizer.php
@@ -23,8 +23,6 @@ use Drupal\pathauto\PathautoState;
 use Drupal\serialization\Normalizer\SerializedColumnNormalizerTrait;
 use Drupal\user\UserInterface;
 use Symfony\Component\Serializer\Exception\UnexpectedValueException;
-use Drupal\layout_builder\Section;
-use Drupal\layout_builder\Plugin\DataType\SectionData;
 
 /**
  * Normalizes and denormalizes content entities.
@@ -255,20 +253,19 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
           }
           $property->setValue($target_entity);
         }
-        elseif ($property instanceof SectionData) {
-          // Rebuild references on layout_builder.
+        elseif (is_a($property, 'Drupal\layout_builder\Plugin\DataType\SectionData')) {
           foreach ($value['components'] as $key => $component) {
-            if (isset($component['configuration']['id'])) {
-              [$component_type] = explode(PluginBase::DERIVATIVE_SEPARATOR, $component['configuration']['id']);
-              if ($component_type == 'inline_block') {
-                $target_uuid = $component['additional']['target_uuid'] ?? NULL;
-                if ($target_uuid && $block_content = $this->entityRepository->loadEntityByUuid('block_content', $target_uuid)) {
-                  $value['components'][$key]['configuration']['block_revision_id'] = $block_content->getRevisionId();
-                }
-              }
+            // Replace normalized per serialized entity.
+            if (is_array($component['configuration'] ?? NULL) && is_array($component['configuration']['block_serialized'] ?? NULL) && ($component['configuration']['block_serialized']['_meta']['entity_type'] ?? NULL) == 'block_content') {
+              $target_entity = $this->denormalize($component['configuration']['block_serialized']);
+              $value['components'][$key]['configuration']['block_serialized'] = serialize($target_entity);
+            }
+            // Replace uuid per id.
+            elseif (is_array($component['configuration'] ?? NULL) && !empty($component['configuration']['block_revision_id']) && $block_content = $this->entityRepository->loadEntityByUuid('block_content', $component['configuration']['block_revision_id'])) {
+              $value['components'][$key]['configuration']['block_revision_id'] = $block_content->getRevisionId();
             }
           }
-          $section_value = Section::fromArray($value);
+          $section_value = 'Drupal\layout_builder\Section'::fromArray($value);
           $property->setValue($section_value);
         }
         else {
@@ -437,22 +434,23 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
         $value = $target->uuid();
       }
     }
-    elseif ($property instanceof SectionData && $property->getValue() instanceof Section) {
+    elseif (is_a($property, 'Drupal\layout_builder\Plugin\DataType\SectionData') && is_a($property->getValue(), 'Drupal\layout_builder\Section')) {
       $value = $property->getValue()->toArray();
-
-      // Layout Sections reference inline blocks by id, we need to reference by
-      // UUID and make sure the section has a dependency on the inline_block.
-      foreach ($value['components'] as $key => $component) {
-        if (isset($component['configuration']['id'])) {
-          // This is only valid for inline_block.
-          [$component_type] = explode(PluginBase::DERIVATIVE_SEPARATOR, $component['configuration']['id']);
-          if ($component_type == 'inline_block') {
-            $block_revision_id = $component['configuration']['block_revision_id'];
-            $block_content = $this->entityTypeManager->getStorage('block_content')->loadRevision($block_revision_id);
-            if ($block_content) {
-              $value['components'][$key]['additional']['target_uuid'] = $block_content->uuid();
-              $this->addDependency($block_content);
-            }
+      $components = $property->getValue()->getComponents();
+      foreach ($components as $component_uuid => $component) {
+        $plugin = $component->getPlugin();
+        if (is_a($plugin, 'Drupal\layout_builder\Plugin\Block\InlineBlock')) {
+          $reflectionMethod = new \ReflectionMethod($plugin, 'getEntity');
+          $reflectionMethod->setAccessible(TRUE);
+          $block_content = $reflectionMethod->invoke($plugin);
+          // Replace serialized per normalized entity.
+          if (!empty($value['components'][$component_uuid]['configuration']['block_serialized']) && empty($block_content->id())) {
+            $value['components'][$component_uuid]['configuration']['block_serialized'] = $this->normalize($block_content);
+          }
+          // Replace id per uuid.
+          elseif (!empty($value['components'][$component_uuid]['configuration']['block_revision_id'])) {
+            $value['components'][$component_uuid]['configuration']['block_revision_id'] = $block_content->uuid();
+            $this->addDependency($block_content);
           }
         }
       }
-- 
GitLab

